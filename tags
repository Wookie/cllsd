!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
B64	src/base64.c	152;"	d	file:
BASE64_H	src/base64.h	20;"	d
BASE64_LENGTH	src/base64.h	30;"	d
BUF_SIZE	test/test_common.c	386;"	d	file:
BUILDDIRS	Makefile	/^BUILDDIRS = $(DIRS:%=build-%)$/;"	m
CFLAGS	src/Makefile	/^CFLAGS=-O3 -gstabs+ -I$(CUTIL_ROOT)\/include$/;"	m
CFLAGS	test/Makefile	/^CFLAGS=-O3 -gstabs+ -I$(CLLSD_ROOT)\/include -I$(CUTIL_ROOT)\/include$/;"	m
CLEANDIRS	Makefile	/^CLEANDIRS = $(DIRS:%=clean-%)$/;"	m
CLLSD_ROOT	test/Makefile	/^CLLSD_ROOT=..\/src$/;"	m
CUTIL_ROOT	src/Makefile	/^CUTIL_ROOT=\/usr\/local$/;"	m
CUTIL_ROOT	test/Makefile	/^CUTIL_ROOT=\/usr\/local$/;"	m
DATE_STR_LEN	src/llsd.h	90;"	d
DEFAULT_ARRAY_CAPACITY	src/llsd.h	91;"	d
DEFAULT_MAP_CAPACITY	src/llsd.h	92;"	d
DIRS	Makefile	/^DIRS = src test$/;"	m
FALSE	src/llsd.h	84;"	d
FNV_PRIME	src/llsd_util.c	159;"	d	file:
FNV_PRIME	src/llsd_util.h	102;"	d
HDR	src/Makefile	/^HDR=base64.h llsd_binary.h llsd.h llsd_const.h llsd_util.h llsd_xml.h$/;"	m
INDENT	src/llsd_binary.c	95;"	d	file:
INSTALL	Makefile	/^INSTALL=\/usr\/bin\/install$/;"	m
INSTALL	src/Makefile	/^INSTALL=\/usr\/bin\/install$/;"	m
INSTALLDIRS	Makefile	/^INSTALLDIRS = $(DIRS:%=install-%)$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA=$(INSTALL) -m 644$/;"	m
INSTALL_DATA	src/Makefile	/^INSTALL_DATA=$(INSTALL) -m 644$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM=$(INSTALL)$/;"	m
INSTALL_PROGRAM	src/Makefile	/^INSTALL_PROGRAM=$(INSTALL)$/;"	m
LDFLAGS	test/Makefile	/^LDFLAGS=-gstabs+ -L$(CLLSD_ROOT)\/lib -L$(CUTIL_ROOT)\/lib$/;"	m
LIBS	test/Makefile	/^LIBS=-lcllsd -lcutil -lcunit -lexpat$/;"	m
LLSD_ARRAY	src/llsd.h	/^	LLSD_ARRAY,$/;"	e	enum:llsd_type_e
LLSD_BASE16	src/llsd.h	/^	LLSD_BASE16,$/;"	e	enum:llsd_bin_enc_s
LLSD_BASE64	src/llsd.h	/^	LLSD_BASE64,$/;"	e	enum:llsd_bin_enc_s
LLSD_BASE85	src/llsd.h	/^	LLSD_BASE85,$/;"	e	enum:llsd_bin_enc_s
LLSD_BINARY	src/llsd.h	/^	LLSD_BINARY,$/;"	e	enum:llsd_type_e
LLSD_BINARY_H	src/llsd_binary.h	18;"	d
LLSD_BIN_ENC_COUNT	src/llsd.h	/^	LLSD_BIN_ENC_COUNT = LLSD_BIN_ENC_LAST - LLSD_BIN_ENC_FIRST$/;"	e	enum:llsd_bin_enc_s
LLSD_BIN_ENC_FIRST	src/llsd.h	/^	LLSD_BIN_ENC_FIRST = LLSD_NONE,$/;"	e	enum:llsd_bin_enc_s
LLSD_BIN_ENC_LAST	src/llsd.h	/^	LLSD_BIN_ENC_LAST,$/;"	e	enum:llsd_bin_enc_s
LLSD_BOOLEAN	src/llsd.h	/^	LLSD_BOOLEAN,$/;"	e	enum:llsd_type_e
LLSD_CONST_H	src/llsd_const.h	18;"	d
LLSD_DATE	src/llsd.h	/^	LLSD_DATE,$/;"	e	enum:llsd_type_e
LLSD_ENC_BINARY	src/llsd.h	/^	LLSD_ENC_BINARY,$/;"	e	enum:llsd_serializer_s
LLSD_ENC_COUNT	src/llsd.h	/^	LLSD_ENC_COUNT = LLSD_ENC_LAST - LLSD_ENC_FIRST$/;"	e	enum:llsd_serializer_s
LLSD_ENC_FIRST	src/llsd.h	/^	LLSD_ENC_FIRST = LLSD_ENC_XML,$/;"	e	enum:llsd_serializer_s
LLSD_ENC_LAST	src/llsd.h	/^	LLSD_ENC_LAST,$/;"	e	enum:llsd_serializer_s
LLSD_ENC_XML	src/llsd.h	/^	LLSD_ENC_XML,$/;"	e	enum:llsd_serializer_s
LLSD_H	src/llsd.h	18;"	d
LLSD_INTEGER	src/llsd.h	/^	LLSD_INTEGER,$/;"	e	enum:llsd_type_e
LLSD_KEY	src/llsd.h	/^	LLSD_KEY, \/* type of LLSD key tag in XML *\/$/;"	e	enum:llsd_type_e
LLSD_LLSD	src/llsd.h	/^	LLSD_LLSD \/* type of LLSD tag in XML *\/$/;"	e	enum:llsd_type_e
LLSD_MAP	src/llsd.h	/^	LLSD_MAP,$/;"	e	enum:llsd_type_e
LLSD_NONE	src/llsd.h	/^	LLSD_NONE,$/;"	e	enum:llsd_bin_enc_s
LLSD_REAL	src/llsd.h	/^	LLSD_REAL,$/;"	e	enum:llsd_type_e
LLSD_STRING	src/llsd.h	/^	LLSD_STRING,$/;"	e	enum:llsd_type_e
LLSD_TYPE_COUNT	src/llsd.h	/^	LLSD_TYPE_COUNT = LLSD_TYPE_LAST - LLSD_TYPE_FIRST,$/;"	e	enum:llsd_type_e
LLSD_TYPE_FIRST	src/llsd.h	/^	LLSD_TYPE_FIRST = LLSD_UNDEF,$/;"	e	enum:llsd_type_e
LLSD_TYPE_INVALID	src/llsd.h	/^	LLSD_TYPE_INVALID,$/;"	e	enum:llsd_type_e
LLSD_TYPE_LAST	src/llsd.h	/^	LLSD_TYPE_LAST,$/;"	e	enum:llsd_type_e
LLSD_UNDEF	src/llsd.h	/^	LLSD_UNDEF,$/;"	e	enum:llsd_type_e
LLSD_URI	src/llsd.h	/^	LLSD_URI,$/;"	e	enum:llsd_type_e
LLSD_UTIL_H	src/llsd_util.h	18;"	d
LLSD_UUID	src/llsd.h	/^	LLSD_UUID,$/;"	e	enum:llsd_type_e
LLSD_XML_H	src/llsd_xml.h	18;"	d
OBJ	src/Makefile	/^OBJ=$(SRC:.c=.o)$/;"	m
OBJ	test/Makefile	/^OBJ=$(SRC:.c=.o)$/;"	m
OUT	src/Makefile	/^OUT=libcllsd.a$/;"	m
OUT	test/Makefile	/^OUT=test_all$/;"	m
PREFIX	src/Makefile	/^PREFIX=\/usr\/local$/;"	m
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
SHELL	src/Makefile	/^SHELL=\/bin\/sh$/;"	m
SHELL	test/Makefile	/^SHELL=\/bin\/sh$/;"	m
SIG_LEN	src/llsd_util.c	1957;"	d	file:
SRC	src/Makefile	/^SRC=base64.c llsd_binary.c llsd.c llsd_const.c llsd_util.c llsd_xml.c $/;"	m
SRC	test/Makefile	/^SRC=test_all.c test_binary.c test_xml.c$/;"	m
TESTDIRS	Makefile	/^TESTDIRS = $(DIRS:%=test-%)$/;"	m
TRUE	src/llsd.h	80;"	d
TYPE_TO_STRING	src/llsd.h	50;"	d
UNINSTALLDIRS	Makefile	/^UNINSTALLDIRS = $(DIRS:%=uninstall-%)$/;"	m
URL_ENCODED_CHAR	src/llsd_util.c	1762;"	d	file:
UUID_LEN	src/llsd.h	88;"	d
UUID_STR_LEN	src/llsd.h	89;"	d
XML_ARRAYC_LEN	src/llsd_xml.c	563;"	d	file:
XML_ARRAY_LEN	src/llsd_xml.c	562;"	d	file:
XML_BINARYC_LEN	src/llsd_xml.c	561;"	d	file:
XML_BINARY_LEN	src/llsd_xml.c	560;"	d	file:
XML_BOOLEANC_LEN	src/llsd_xml.c	547;"	d	file:
XML_BOOLEAN_LEN	src/llsd_xml.c	546;"	d	file:
XML_BUF_SIZE	src/llsd_xml.c	485;"	d	file:
XML_DATEC_LEN	src/llsd_xml.c	557;"	d	file:
XML_DATE_LEN	src/llsd_xml.c	556;"	d	file:
XML_FOOTER_LEN	src/llsd_util.c	1955;"	d	file:
XML_HEADER_LEN	src/llsd_util.c	1954;"	d	file:
XML_INTEGERC_LEN	src/llsd_xml.c	549;"	d	file:
XML_INTEGER_LEN	src/llsd_xml.c	548;"	d	file:
XML_KEYC_LEN	src/llsd_xml.c	567;"	d	file:
XML_KEY_LEN	src/llsd_xml.c	566;"	d	file:
XML_MAPC_LEN	src/llsd_xml.c	565;"	d	file:
XML_MAP_LEN	src/llsd_xml.c	564;"	d	file:
XML_REALC_LEN	src/llsd_xml.c	551;"	d	file:
XML_REAL_LEN	src/llsd_xml.c	550;"	d	file:
XML_SIG_LEN	src/llsd_util.c	1953;"	d	file:
XML_SIZEC_LEN	src/llsd_xml.c	587;"	d	file:
XML_STRINGC_LEN	src/llsd_xml.c	555;"	d	file:
XML_STRING_LEN	src/llsd_xml.c	554;"	d	file:
XML_UNDEFC_LEN	src/llsd_xml.c	545;"	d	file:
XML_UNDEF_LEN	src/llsd_xml.c	544;"	d	file:
XML_URIC_LEN	src/llsd_xml.c	559;"	d	file:
XML_URI_LEN	src/llsd_xml.c	558;"	d	file:
XML_UUIDC_LEN	src/llsd_xml.c	553;"	d	file:
XML_UUID_LEN	src/llsd_xml.c	552;"	d	file:
_BSD_SOURCE	src/llsd_binary.c	18;"	d	file:
_BSD_SOURCE	src/llsd_util.c	18;"	d	file:
__TEST_BINARY__	test/test_binary.h	18;"	d
__TEST_XML__	test/test_xml.h	18;"	d
add_binary_test_suite	test/test_binary.c	/^CU_pSuite add_binary_test_suite()$/;"	f
add_binary_tests	test/test_binary.c	/^static CU_pSuite add_binary_tests( CU_pSuite pSuite )$/;"	f	file:
add_tests	test/test_common.c	/^static CU_pSuite add_tests( CU_pSuite pSuite )$/;"	f	file:
add_xml_test_suite	test/test_xml.c	/^CU_pSuite add_xml_test_suite()$/;"	f
add_xml_tests	test/test_xml.c	/^static CU_pSuite add_xml_tests( CU_pSuite pSuite )$/;"	f	file:
array	src/llsd.h	/^	array_t		array;$/;"	m	struct:llsd_array_s
array_	src/llsd.h	/^		llsd_array_t	array_;$/;"	m	union:llsd_s::__anon1
array_	test/test_binary.c	/^static uint8_t const array_[] = { '[', 0x00, 0x00, 0x00, 0x00, ']' };$/;"	v	file:
array_	test/test_xml.c	/^static uint8_t const array_[] = "<llsd><array size=\\"0\\"><\/array><\/llsd>";$/;"	v	file:
b64	src/base64.c	/^static const signed char b64[0x100] = {$/;"	v	file:
base64_decode	src/base64.c	/^base64_decode (const char * in, size_t inlen,$/;"	f
base64_decode_alloc	src/base64.c	/^base64_decode_alloc (const char *in, size_t inlen, char **out,$/;"	f
base64_encode	src/base64.c	/^base64_encode (const char * in, size_t inlen,$/;"	f
base64_encode_alloc	src/base64.c	/^base64_encode_alloc (const char *in, size_t inlen, char **out)$/;"	f
be	src/llsd.h	/^	uint32_t			be;$/;"	m	struct:llsd_binary_s
be	src/llsd.h	/^	uint32_t			be;$/;"	m	struct:llsd_int_s
be	src/llsd.h	/^	uint32_t			be;$/;"	m	struct:llsd_string_s
be	src/llsd.h	/^	uint32_t			be;$/;"	m	struct:llsd_uri_s
be	src/llsd.h	/^	uint32_t	be;$/;"	m	struct:llsd_array_s
be	src/llsd.h	/^	uint32_t	be;$/;"	m	struct:llsd_map_s
be	src/llsd.h	/^	uint64_t			be;$/;"	m	struct:llsd_date_s
be	src/llsd.h	/^	uint64_t			be;$/;"	m	struct:llsd_real_s
binary_	src/llsd.h	/^		llsd_binary_t	binary_;$/;"	m	union:llsd_s::__anon1
binary_	test/test_binary.c	/^static uint8_t const binary_[] = { 'b', 0x00, 0x00, 0x00, 0x10, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };$/;"	v	file:
binary_	test/test_xml.c	/^static uint8_t const binary_[] = "<llsd><binary encoding=\\"base64\\">AQIDBAUGBwgJAAECAwQFBg==<\/binary><\/llsd>";$/;"	v	file:
binary_header	src/llsd_util.c	/^static uint8_t const * const binary_header = "<? LLSD\/Binary ?>\\n";$/;"	v	file:
bits	src/llsd.h	/^	uint8_t *			bits;$/;"	m	struct:llsd_uuid_s
bits	src/llsd_const.c	/^static uint8_t bits[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };$/;"	v	file:
bool_	src/llsd.h	/^		llsd_bool_t		bool_;$/;"	m	union:llsd_s::__anon1
boolean_	test/test_binary.c	/^static uint8_t const boolean_[]= { '1' };$/;"	v	file:
boolean_	test/test_xml.c	/^static uint8_t const boolean_[] = "<llsd><boolean>true<\/boolean><\/llsd>";$/;"	v	file:
buf	src/llsd_xml.c	/^	char * buf;$/;"	m	struct:context_s	file:
containers	src/llsd_xml.c	/^	array_t * containers;$/;"	m	struct:context_s	file:
context_s	src/llsd_xml.c	/^typedef struct context_s$/;"	s	file:
context_t	src/llsd_xml.c	/^} context_t;$/;"	t	typeref:struct:context_s	file:
data	src/llsd.h	/^	uint8_t	*			data;$/;"	m	struct:llsd_binary_s
data_offset	test/test_binary.c	/^static size_t const data_offset = 18;$/;"	v	file:
data_offset	test/test_xml.c	/^static size_t const data_offset = 38;$/;"	v	file:
data_size	src/llsd.h	/^	uint32_t			data_size;$/;"	m	struct:llsd_binary_s
date_	src/llsd.h	/^		llsd_date_t		date_;$/;"	m	union:llsd_s::__anon1
date_	test/test_binary.c	/^static uint8_t const date_[] = { 'd', 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };$/;"	v	file:
date_	test/test_xml.c	/^static uint8_t const date_[] = "<llsd><date>1970-01-01T00:00:01.000Z<\/date><\/llsd>";$/;"	v	file:
deinit_binary_suite	test/test_binary.c	/^static int deinit_binary_suite( void )$/;"	f	file:
deinit_xml_suite	test/test_xml.c	/^static int deinit_xml_suite( void )$/;"	f	file:
dval	src/llsd.h	/^	double				dval;$/;"	m	struct:llsd_date_s
dyn_bits	src/llsd.h	/^	int					dyn_bits: 1;$/;"	m	struct:llsd_uuid_s
dyn_data	src/llsd.h	/^	int					dyn_data: 1;$/;"	m	struct:llsd_binary_s
dyn_enc	src/llsd.h	/^	int					dyn_enc: 1;$/;"	m	struct:llsd_binary_s
dyn_esc	src/llsd.h	/^	int					dyn_esc: 1;$/;"	m	struct:llsd_string_s
dyn_esc	src/llsd.h	/^	int					dyn_esc: 1;$/;"	m	struct:llsd_uri_s
dyn_str	src/llsd.h	/^	int					dyn_str:  1;$/;"	m	struct:llsd_uuid_s
dyn_str	src/llsd.h	/^	int					dyn_str: 1;$/;"	m	struct:llsd_date_s
dyn_str	src/llsd.h	/^	int					dyn_str: 1;$/;"	m	struct:llsd_string_s
dyn_uri	src/llsd.h	/^	int					dyn_uri: 1;$/;"	m	struct:llsd_uri_s
empty_array	src/llsd_const.c	/^llsd_array_t const empty_array =$/;"	v
empty_binary	src/llsd_const.c	/^llsd_binary_t const empty_binary =$/;"	v
empty_date	src/llsd_const.c	/^llsd_date_t const empty_date =$/;"	v
empty_map	src/llsd_const.c	/^llsd_map_t const empty_map =$/;"	v
empty_string	src/llsd_const.c	/^llsd_string_t const empty_string = $/;"	v
empty_uri	src/llsd_const.c	/^llsd_uri_t const empty_uri = $/;"	v
enc	src/llsd.h	/^	uint8_t *			enc;$/;"	m	struct:llsd_binary_s
enc_size	src/llsd.h	/^	uint32_t			enc_size;$/;"	m	struct:llsd_binary_s
encoding	src/llsd.h	/^	llsd_bin_enc_t		encoding;$/;"	m	struct:llsd_binary_s
esc	src/llsd.h	/^	uint8_t *			esc;$/;"	m	struct:llsd_string_s
esc	src/llsd.h	/^	uint8_t *			esc;$/;"	m	struct:llsd_uri_s
esc_len	src/llsd.h	/^	uint32_t			esc_len;$/;"	m	struct:llsd_string_s
esc_len	src/llsd.h	/^	uint32_t			esc_len;$/;"	m	struct:llsd_uri_s
expected_data	test/test_binary.c	/^static uint8_t const * const expected_data[ LLSD_TYPE_COUNT ] =$/;"	v	file:
expected_data	test/test_xml.c	/^static uint8_t const * const expected_data[ LLSD_TYPE_COUNT ] =$/;"	v	file:
expected_sizes	test/test_binary.c	/^static size_t expected_sizes[ LLSD_TYPE_COUNT ] = $/;"	v	file:
expected_sizes	test/test_xml.c	/^static size_t expected_sizes[ LLSD_TYPE_COUNT ] = $/;"	v	file:
false_binary	src/llsd_const.c	/^llsd_binary_t const false_binary =$/;"	v
false_string	src/llsd_const.c	/^llsd_string_t const false_string = $/;"	v
fnv_key_hash	src/llsd_util.c	/^uint32_t fnv_key_hash(void const * const key)$/;"	f
format	test/test_binary.c	/^static llsd_serializer_t format;$/;"	v	file:
format	test/test_xml.c	/^static llsd_serializer_t format;$/;"	v	file:
get_llsd	test/test_common.c	/^static llsd_t * get_llsd( llsd_type_t type_ )$/;"	f	file:
get_random_array	test/test_common.c	/^static llsd_t * get_random_array( uint32_t size )$/;"	f	file:
get_random_bin	test/test_common.c	/^static llsd_t* get_random_bin( void )$/;"	f	file:
get_random_date	test/test_common.c	/^static llsd_t* get_random_date( void )$/;"	f	file:
get_random_llsd	test/test_common.c	/^static llsd_t * get_random_llsd( uint32_t size, uint32_t seed )$/;"	f	file:
get_random_llsd_type	test/test_common.c	/^static llsd_type_t get_random_llsd_type( void )$/;"	f	file:
get_random_map	test/test_common.c	/^static llsd_t * get_random_map( uint32_t size )$/;"	f	file:
get_random_str	test/test_common.c	/^static llsd_t* get_random_str( void )$/;"	f	file:
get_random_uri	test/test_common.c	/^static llsd_t* get_random_uri( void )$/;"	f	file:
get_random_uuid	test/test_common.c	/^static llsd_t* get_random_uuid( void )$/;"	f	file:
hex_to_byte	src/llsd_util.c	/^static uint8_t hex_to_byte( uint8_t hi, uint8_t lo )$/;"	f	file:
ht	src/llsd.h	/^	ht_t		ht;$/;"	m	struct:llsd_map_s
indent	src/llsd_binary.c	/^static int indent = 0;$/;"	v	file:
indent	src/llsd_util.c	/^static indent = 0;$/;"	v	file:
indent	src/llsd_xml.c	/^	int indent;$/;"	m	struct:context_s	file:
indent	src/llsd_xml.c	/^static uint32_t indent = 1;$/;"	v	file:
indent_xml	src/llsd_xml.c	637;"	d	file:
init_binary_suite	test/test_binary.c	/^static int init_binary_suite( void )$/;"	f	file:
init_xml_suite	test/test_xml.c	/^static int init_xml_suite( void )$/;"	f	file:
int_	src/llsd.h	/^		llsd_int_t		int_;$/;"	m	union:llsd_s::__anon1
integer_	test/test_binary.c	/^static uint8_t const integer_[] = { 'i', 0x00, 0x00, 0x00, 0x01 };$/;"	v	file:
integer_	test/test_xml.c	/^static uint8_t const integer_[] = "<llsd><integer>1<\/integer><\/llsd>";$/;"	v	file:
isbase64	src/base64.c	/^isbase64 (char ch)$/;"	f
key_eq	src/llsd_util.c	/^int key_eq(void const * const l, void const * const r)$/;"	f
key_esc	src/llsd.h	/^	int					key_esc: 1;$/;"	m	struct:llsd_string_s
lbarray	src/llsd_binary.c	/^static uint8_t const * const lbarray	= "[";$/;"	v	file:
lbarrayc	src/llsd_binary.c	/^static uint8_t const * const lbarrayc	= "]";$/;"	v	file:
lbbinary	src/llsd_binary.c	/^static uint8_t const * const lbbinary	= "b";$/;"	v	file:
lbdate	src/llsd_binary.c	/^static uint8_t const * const lbdate		= "d";$/;"	v	file:
lbfalse	src/llsd_binary.c	/^static uint8_t const * const lbfalse	= "0";$/;"	v	file:
lbinteger	src/llsd_binary.c	/^static uint8_t const * const lbinteger	= "i";$/;"	v	file:
lbmap	src/llsd_binary.c	/^static uint8_t const * const lbmap		= "{";$/;"	v	file:
lbmapc	src/llsd_binary.c	/^static uint8_t const * const lbmapc		= "}";$/;"	v	file:
lbreal	src/llsd_binary.c	/^static uint8_t const * const lbreal		= "r";$/;"	v	file:
lbstring	src/llsd_binary.c	/^static uint8_t const * const lbstring	= "s";$/;"	v	file:
lbtrue	src/llsd_binary.c	/^static uint8_t const * const lbtrue		= "1";$/;"	v	file:
lbundef	src/llsd_binary.c	/^static uint8_t const * const lbundef	= "!";$/;"	v	file:
lburi	src/llsd_binary.c	/^static uint8_t const * const lburi		= "l";$/;"	v	file:
lbuuid	src/llsd_binary.c	/^static uint8_t const * const lbuuid		= "u";$/;"	v	file:
len	src/llsd.h	/^	uint32_t			len;$/;"	m	struct:llsd_date_s
len	src/llsd.h	/^	uint32_t			len;$/;"	m	struct:llsd_uuid_s
len	src/llsd_xml.c	/^	size_t len;$/;"	m	struct:context_s	file:
llsd_array_append	src/llsd_util.c	/^void llsd_array_append( llsd_t * arr, llsd_t * data )$/;"	f
llsd_array_s	src/llsd.h	/^struct llsd_array_s$/;"	s
llsd_array_t	src/llsd.h	/^typedef struct llsd_array_s		llsd_array_t;$/;"	t	typeref:struct:llsd_array_s
llsd_as_array	src/llsd_util.c	/^llsd_array_t llsd_as_array( llsd_t * llsd )$/;"	f
llsd_as_binary	src/llsd_util.c	/^llsd_binary_t llsd_as_binary( llsd_t * llsd )$/;"	f
llsd_as_bool	src/llsd_util.c	/^llsd_bool_t llsd_as_bool( llsd_t * llsd )$/;"	f
llsd_as_date	src/llsd_util.c	/^llsd_date_t llsd_as_date( llsd_t * llsd )$/;"	f
llsd_as_int	src/llsd_util.c	/^llsd_int_t llsd_as_int( llsd_t * llsd )$/;"	f
llsd_as_map	src/llsd_util.c	/^llsd_map_t llsd_as_map( llsd_t * llsd )$/;"	f
llsd_as_real	src/llsd_util.c	/^llsd_real_t llsd_as_real( llsd_t * llsd )$/;"	f
llsd_as_string	src/llsd_util.c	/^llsd_string_t llsd_as_string( llsd_t * llsd )$/;"	f
llsd_as_uri	src/llsd_util.c	/^llsd_uri_t llsd_as_uri( llsd_t * llsd )$/;"	f
llsd_as_uuid	src/llsd_util.c	/^llsd_uuid_t llsd_as_uuid( llsd_t * llsd )$/;"	f
llsd_bin_enc_from_attr	src/llsd_xml.c	/^static llsd_bin_enc_t llsd_bin_enc_from_attr( char const * attr )$/;"	f	file:
llsd_bin_enc_s	src/llsd.h	/^typedef enum llsd_bin_enc_s$/;"	g
llsd_bin_enc_t	src/llsd.h	/^} llsd_bin_enc_t;$/;"	t	typeref:enum:llsd_bin_enc_s
llsd_bin_enc_type_strings	src/llsd.c	/^int8_t const * const llsd_bin_enc_type_strings[LLSD_BIN_ENC_COUNT] =$/;"	v
llsd_binary_s	src/llsd.h	/^struct llsd_binary_s$/;"	s
llsd_binary_t	src/llsd.h	/^typedef struct llsd_binary_s	llsd_binary_t;$/;"	t	typeref:struct:llsd_binary_s
llsd_bool_t	src/llsd.h	/^typedef int						llsd_bool_t;$/;"	t
llsd_date_s	src/llsd.h	/^struct llsd_date_s$/;"	s
llsd_date_t	src/llsd.h	/^typedef struct llsd_date_s		llsd_date_t;$/;"	t	typeref:struct:llsd_date_s
llsd_decode_binary	src/llsd_util.c	/^int llsd_decode_binary( llsd_t * llsd )$/;"	f
llsd_decoded_binary_len	src/llsd_util.c	/^static uint32_t llsd_decoded_binary_len( llsd_t * llsd )$/;"	f	file:
llsd_deinitialize	src/llsd_util.c	/^static void llsd_deinitialize( llsd_t * llsd )$/;"	f	file:
llsd_delete	src/llsd_util.c	/^void llsd_delete( void * p )$/;"	f
llsd_destringify_date	src/llsd_util.c	/^int llsd_destringify_date( llsd_t * llsd )$/;"	f
llsd_destringify_uuid	src/llsd_util.c	/^int llsd_destringify_uuid( llsd_t * llsd )$/;"	f
llsd_encode_binary	src/llsd_util.c	/^int llsd_encode_binary( llsd_t * llsd, llsd_bin_enc_t encoding )$/;"	f
llsd_equal	src/llsd_util.c	/^int llsd_equal( llsd_t * l, llsd_t * r )$/;"	f
llsd_equalize	src/llsd_util.c	/^static int llsd_equalize ( llsd_t * l, llsd_t * r )$/;"	f	file:
llsd_escape_string	src/llsd_util.c	/^int llsd_escape_string( llsd_t * llsd )$/;"	f
llsd_escape_uri	src/llsd_util.c	/^int llsd_escape_uri( llsd_t * llsd )$/;"	f
llsd_escaped_string_len	src/llsd_util.c	/^static uint32_t llsd_escaped_string_len( llsd_t * llsd )$/;"	f	file:
llsd_escaped_uri_len	src/llsd_util.c	/^static uint32_t llsd_escaped_uri_len( llsd_t * llsd )$/;"	f	file:
llsd_format	src/llsd_util.c	/^size_t llsd_format( llsd_t * llsd, llsd_serializer_t fmt, FILE * fout, int pretty )$/;"	f
llsd_format_binary	src/llsd_binary.c	/^size_t llsd_format_binary( llsd_t * llsd, FILE * fout )$/;"	f
llsd_format_binary_zero_copy	src/llsd_binary.c	/^size_t llsd_format_binary_zero_copy( llsd_t * llsd, struct iovec * v )$/;"	f
llsd_format_xml	src/llsd_xml.c	/^size_t llsd_format_xml( llsd_t * llsd, FILE * fout, int pretty )$/;"	f
llsd_format_xml_zero_copy	src/llsd_xml.c	/^size_t llsd_format_xml_zero_copy( llsd_t * llsd, struct iovec * v, int pretty )$/;"	f
llsd_format_zero_copy	src/llsd_util.c	/^size_t llsd_format_zero_copy( llsd_t * llsd, llsd_serializer_t fmt, struct iovec ** v, int pretty )$/;"	f
llsd_get_bin_enc_type_string	src/llsd_util.c	/^int8_t const * llsd_get_bin_enc_type_string( llsd_bin_enc_t enc )$/;"	f
llsd_get_binary_zero_copy_size	src/llsd_binary.c	/^size_t llsd_get_binary_zero_copy_size( llsd_t * llsd )$/;"	f
llsd_get_size	src/llsd_util.c	/^int llsd_get_size( llsd_t * llsd )$/;"	f
llsd_get_type	src/llsd_util.c	/^llsd_type_t llsd_get_type( llsd_t * llsd )$/;"	f
llsd_get_type_string	src/llsd_util.c	/^int8_t const * llsd_get_type_string( llsd_type_t type_ )$/;"	f
llsd_get_xml_zero_copy_size	src/llsd_xml.c	/^size_t llsd_get_xml_zero_copy_size( llsd_t * llsd, int pretty )$/;"	f
llsd_get_zero_copy_size	src/llsd_util.c	/^static size_t llsd_get_zero_copy_size( llsd_t * llsd, llsd_serializer_t fmt, int pretty )$/;"	f	file:
llsd_initialize	src/llsd_util.c	/^static void llsd_initialize( llsd_t * llsd, llsd_type_t type_, ... )$/;"	f	file:
llsd_int_s	src/llsd.h	/^struct llsd_int_s$/;"	s
llsd_int_t	src/llsd.h	/^typedef struct llsd_int_s		llsd_int_t;$/;"	t	typeref:struct:llsd_int_s
llsd_is_array	src/llsd_util.h	48;"	d
llsd_is_empty	src/llsd_util.h	53;"	d
llsd_is_map	src/llsd_util.h	49;"	d
llsd_itr_begin	src/llsd_util.c	/^llsd_itr_t llsd_itr_begin( llsd_t * llsd )$/;"	f
llsd_itr_end	src/llsd_util.c	/^llsd_itr_t llsd_itr_end( llsd_t * llsd )$/;"	f
llsd_itr_get	src/llsd_util.c	/^int llsd_itr_get( llsd_t * llsd, llsd_itr_t itr, llsd_t ** value, llsd_t ** key )$/;"	f
llsd_itr_next	src/llsd_util.c	/^llsd_itr_t llsd_itr_next( llsd_t * llsd, llsd_itr_t itr )$/;"	f
llsd_itr_rbegin	src/llsd_util.c	/^llsd_itr_t llsd_itr_rbegin( llsd_t * llsd )$/;"	f
llsd_itr_rend	src/llsd_util.h	67;"	d
llsd_itr_rnext	src/llsd_util.c	/^llsd_itr_t llsd_itr_rnext( llsd_t * llsd, llsd_itr_t itr )$/;"	f
llsd_itr_t	src/llsd_util.h	/^typedef int32_t llsd_itr_t;$/;"	t
llsd_map_find	src/llsd_util.c	/^llsd_t * llsd_map_find( llsd_t * map, llsd_t * key )$/;"	f
llsd_map_insert	src/llsd_util.c	/^void llsd_map_insert( llsd_t * map, llsd_t * key, llsd_t * data )$/;"	f
llsd_map_s	src/llsd.h	/^struct llsd_map_s$/;"	s
llsd_map_t	src/llsd.h	/^typedef struct llsd_map_s		llsd_map_t;$/;"	t	typeref:struct:llsd_map_s
llsd_new	src/llsd_util.c	/^llsd_t * llsd_new( llsd_type_t type_, ... )$/;"	f
llsd_new_array	src/llsd_util.h	33;"	d
llsd_new_binary	src/llsd_util.h	41;"	d
llsd_new_boolean	src/llsd_util.h	35;"	d
llsd_new_date	src/llsd_util.h	42;"	d
llsd_new_empty_array	src/llsd_util.h	31;"	d
llsd_new_empty_map	src/llsd_util.h	32;"	d
llsd_new_integer	src/llsd_util.h	36;"	d
llsd_new_map	src/llsd_util.h	34;"	d
llsd_new_real	src/llsd_util.h	37;"	d
llsd_new_string	src/llsd_util.h	39;"	d
llsd_new_uri	src/llsd_util.h	40;"	d
llsd_new_uuid	src/llsd_util.h	38;"	d
llsd_parse	src/llsd_util.c	/^llsd_t * llsd_parse( FILE *fin )$/;"	f
llsd_parse_binary	src/llsd_binary.c	/^llsd_t * llsd_parse_binary( FILE * fin )$/;"	f
llsd_parse_xml	src/llsd_xml.c	/^llsd_t * llsd_parse_xml( FILE * fin )$/;"	f
llsd_real_s	src/llsd.h	/^struct llsd_real_s$/;"	s
llsd_real_t	src/llsd.h	/^typedef struct llsd_real_s		llsd_real_t;$/;"	t	typeref:struct:llsd_real_s
llsd_reserve_array	src/llsd_binary.c	/^static llsd_t * llsd_reserve_array( uint32_t size )$/;"	f	file:
llsd_reserve_binary	src/llsd_binary.c	/^static llsd_t * llsd_reserve_binary( uint32_t size )$/;"	f	file:
llsd_reserve_date	src/llsd_binary.c	/^static llsd_t * llsd_reserve_date( uint32_t size )$/;"	f	file:
llsd_reserve_map	src/llsd_binary.c	/^static llsd_t * llsd_reserve_map( uint32_t size )$/;"	f	file:
llsd_reserve_string	src/llsd_binary.c	/^static llsd_t * llsd_reserve_string( uint32_t size )$/;"	f	file:
llsd_reserve_uri	src/llsd_binary.c	/^static llsd_t * llsd_reserve_uri( uint32_t size )$/;"	f	file:
llsd_s	src/llsd.h	/^typedef struct llsd_s$/;"	s
llsd_serializer_s	src/llsd.h	/^typedef enum llsd_serializer_s$/;"	g
llsd_serializer_t	src/llsd.h	/^} llsd_serializer_t;$/;"	t	typeref:enum:llsd_serializer_s
llsd_string_eq	src/llsd_util.c	/^static int llsd_string_eq( llsd_t * l, llsd_t * r )$/;"	f	file:
llsd_string_s	src/llsd.h	/^struct llsd_string_s$/;"	s
llsd_string_t	src/llsd.h	/^typedef struct llsd_string_s	llsd_string_t;$/;"	t	typeref:struct:llsd_string_s
llsd_stringify_date	src/llsd_util.c	/^int llsd_stringify_date( llsd_t * llsd )$/;"	f
llsd_stringify_uuid	src/llsd_util.c	/^int llsd_stringify_uuid( llsd_t * llsd )$/;"	f
llsd_t	src/llsd.h	/^} llsd_t;$/;"	t	typeref:struct:llsd_s
llsd_type_e	src/llsd.h	/^typedef enum llsd_type_e$/;"	g
llsd_type_from_tag	src/llsd_xml.c	/^static llsd_type_t llsd_type_from_tag( char const * tag )$/;"	f	file:
llsd_type_strings	src/llsd.c	/^int8_t const * const llsd_type_strings[LLSD_TYPE_COUNT] =$/;"	v
llsd_type_t	src/llsd.h	/^} llsd_type_t;$/;"	t	typeref:enum:llsd_type_e
llsd_unescape_string	src/llsd_util.c	/^int llsd_unescape_string( llsd_t * llsd )$/;"	f
llsd_unescape_uri	src/llsd_util.c	/^int llsd_unescape_uri( llsd_t * llsd )$/;"	f
llsd_unescaped_string_len	src/llsd_util.c	/^static uint32_t llsd_unescaped_string_len( llsd_t * llsd )$/;"	f	file:
llsd_uri_eq	src/llsd_util.c	/^static int llsd_uri_eq( llsd_t * l, llsd_t * r )$/;"	f	file:
llsd_uri_s	src/llsd.h	/^struct llsd_uri_s$/;"	s
llsd_uri_t	src/llsd.h	/^typedef struct llsd_uri_s		llsd_uri_t;$/;"	t	typeref:struct:llsd_uri_s
llsd_uuid_s	src/llsd.h	/^struct llsd_uuid_s$/;"	s
llsd_uuid_t	src/llsd.h	/^typedef struct llsd_uuid_s		llsd_uuid_t;$/;"	t	typeref:struct:llsd_uuid_s
llsd_write_xml_end_tag	src/llsd_xml.c	/^static size_t llsd_write_xml_end_tag( llsd_type_t t, FILE * fout, int pretty )$/;"	f	file:
llsd_write_xml_start_tag	src/llsd_xml.c	/^static size_t llsd_write_xml_start_tag( llsd_type_t t, FILE * fout, int pretty, int size)$/;"	f	file:
llsd_xml_data_handler	src/llsd_xml.c	/^static void XMLCALL llsd_xml_data_handler( void * data, char const * s, int len )$/;"	f	file:
llsd_xml_end_tag	src/llsd_xml.c	/^static void XMLCALL llsd_xml_end_tag( void * data, char const * el )$/;"	f	file:
llsd_xml_start_tag	src/llsd_xml.c	/^static void XMLCALL llsd_xml_start_tag( void * data, char const * el, char const ** attr )$/;"	f	file:
lxend	src/llsd_xml.c	/^static uint8_t const * const lxend[LLSD_TYPE_COUNT] =$/;"	v	file:
lxendlen	src/llsd_xml.c	/^static uint32_t lxendlen[LLSD_TYPE_COUNT] =$/;"	v	file:
lxkey	src/llsd_xml.c	/^static uint8_t const * const lxkey		= "<key>";$/;"	v	file:
lxkeyc	src/llsd_xml.c	/^static uint8_t const * const lxkeyc		= "<\/key>\\n";$/;"	v	file:
lxstart	src/llsd_xml.c	/^static uint8_t const * const lxstart[LLSD_TYPE_COUNT] =$/;"	v	file:
lxstartc	src/llsd_xml.c	/^static uint8_t const * const lxstartc = "\\">\\n";$/;"	v	file:
lxstartlen	src/llsd_xml.c	/^static uint32_t lxstartlen[LLSD_TYPE_COUNT] =$/;"	v	file:
lxtabs	src/llsd_xml.c	/^static uint8_t const * const lxtabs		= "\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t";$/;"	v	file:
main	test/test_all.c	/^int main()$/;"	f
map_	src/llsd.h	/^		llsd_map_t		map_;$/;"	m	union:llsd_s::__anon1
map_	test/test_binary.c	/^static uint8_t const map_[] = { '{', 0x00, 0x00, 0x00, 0x00, '}' };$/;"	v	file:
map_	test/test_xml.c	/^static uint8_t const map_[] = "<llsd><map size=\\"0\\"><\/map><\/llsd>";$/;"	v	file:
mem_len_cmp	src/llsd_util.c	/^static int mem_len_cmp( uint8_t * l, uint32_t llen, uint8_t * r, uint32_t rlen )$/;"	f	file:
one_data	src/llsd_const.c	/^static uint8_t one_data[] = { '1' };$/;"	v	file:
one_int	src/llsd_const.c	/^llsd_int_t const one_int =$/;"	v
one_real	src/llsd_const.c	/^llsd_real_t const one_real =$/;"	v
params	src/llsd_xml.c	/^	array_t * params;$/;"	m	struct:context_s	file:
print_stack	src/llsd_xml.c	/^static void print_stack( array_t * arr )$/;"	f	file:
real_	src/llsd.h	/^		llsd_real_t		real_;$/;"	m	union:llsd_s::__anon1
real_	test/test_binary.c	/^static uint8_t const real_[] = { 'r', 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };$/;"	v	file:
real_	test/test_xml.c	/^static uint8_t const real_[] = "<llsd><real>1.000000<\/real><\/llsd>";$/;"	v	file:
result	src/llsd_xml.c	/^	llsd_t * result;$/;"	m	struct:context_s	file:
str	src/llsd.h	/^	uint8_t *			str;$/;"	m	struct:llsd_string_s
str	src/llsd.h	/^	uint8_t *			str;$/;"	m	struct:llsd_uuid_s
str	src/llsd.h	/^	uint8_t*			str;$/;"	m	struct:llsd_date_s
str_len	src/llsd.h	/^	uint32_t			str_len;$/;"	m	struct:llsd_string_s
string_	src/llsd.h	/^		llsd_string_t	string_;$/;"	m	union:llsd_s::__anon1
string_	test/test_binary.c	/^static uint8_t const string_[] = { 's', 0x00, 0x00, 0x00, 0x0c, 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!' };$/;"	v	file:
string_	test/test_xml.c	/^static uint8_t const string_[] = "<llsd><string>Hello World!<\/string><\/llsd>";$/;"	v	file:
test_newdel	test/test_common.c	/^static void test_newdel( void )$/;"	f	file:
test_random_serialize	test/test_common.c	/^static void test_random_serialize( void )$/;"	f	file:
test_random_serialize_zero_copy	test/test_common.c	/^static void test_random_serialize_zero_copy( void )$/;"	f	file:
test_serialization	test/test_common.c	/^static void test_serialization( void )$/;"	f	file:
testbits	test/test_common.c	/^static uint8_t const testbits[UUID_LEN] = { 1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6 };$/;"	v	file:
teststr	test/test_common.c	/^static int8_t const * const teststr = T("Hello World!");$/;"	v	file:
testurl	test/test_common.c	/^static int8_t const * const testurl = T("http:\/\/www.ixquick.com");$/;"	v	file:
tmpf	test/test_binary.c	/^static FILE* tmpf;$/;"	v	file:
tmpf	test/test_xml.c	/^static FILE* tmpf;$/;"	v	file:
to_uchar	src/base64.c	/^to_uchar (char ch)$/;"	f	file:
true_binary	src/llsd_const.c	/^llsd_binary_t const true_binary =$/;"	v
true_string	src/llsd_const.c	/^llsd_string_t const true_string = $/;"	v
type_	src/llsd.h	/^	llsd_type_t			type_;$/;"	m	struct:llsd_s
uchar_in_range	src/base64.c	287;"	d	file:
uchar_in_range	src/base64.c	289;"	d	file:
undef_	test/test_binary.c	/^static uint8_t const undef_[] = { '!' };$/;"	v	file:
undef_	test/test_xml.c	/^static uint8_t const undef_[] = "<llsd><undef \/><\/llsd>";$/;"	v	file:
undefined	src/llsd_const.c	/^llsd_t const undefined =$/;"	v
uri	src/llsd.h	/^	uint8_t *			uri;$/;"	m	struct:llsd_uri_s
uri_	src/llsd.h	/^		llsd_uri_t		uri_;$/;"	m	union:llsd_s::__anon1
uri_	test/test_binary.c	/^static uint8_t const uri_[] = { 'l', 0x00, 0x00, 0x00, 0x16, 'h', 't', 't', 'p', ':', '\/', '\/', 'w', 'w', 'w', '.', 'i', 'x', 'q', 'u', 'i', 'c', 'k', '.', 'c', 'o', 'm' };$/;"	v	file:
uri_	test/test_xml.c	/^static uint8_t const uri_[] = "<llsd><uri>http:\/\/www.ixquick.com<\/uri><\/llsd>";$/;"	v	file:
uri_len	src/llsd.h	/^	uint32_t			uri_len;$/;"	m	struct:llsd_uri_s
use_dval	src/llsd.h	/^	int					use_dval: 1;$/;"	m	struct:llsd_date_s
uuid_	src/llsd.h	/^		llsd_uuid_t		uuid_;$/;"	m	union:llsd_s::__anon1
uuid_	test/test_binary.c	/^static uint8_t const uuid_[] = { 'u', 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };$/;"	v	file:
uuid_	test/test_xml.c	/^static uint8_t const uuid_[] = "<llsd><uuid>01020304-0506-0708-0900-010203040506<\/uuid><\/llsd>";$/;"	v	file:
v	src/llsd.h	/^	double				v;$/;"	m	struct:llsd_real_s
v	src/llsd.h	/^	int32_t				v;$/;"	m	struct:llsd_int_s
xml_footer	src/llsd_util.c	/^static uint8_t const * const xml_footer = "<\/llsd>\\n";$/;"	v	file:
xml_header	src/llsd_util.c	/^static uint8_t const * const xml_header = "<llsd>\\n";$/;"	v	file:
xml_signature	src/llsd_util.c	/^static uint8_t const * const xml_signature = "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n";$/;"	v	file:
zero_data	src/llsd_const.c	/^static uint8_t zero_data [] = { '0' };$/;"	v	file:
zero_int	src/llsd_const.c	/^llsd_int_t const zero_int =$/;"	v
zero_real	src/llsd_const.c	/^llsd_real_t const zero_real =$/;"	v
zero_uuid	src/llsd_const.c	/^llsd_uuid_t const zero_uuid = $/;"	v
