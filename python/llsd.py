# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_llsd', [dirname(__file__)])
        except ImportError:
            import _llsd
            return _llsd
        if fp is not None:
            try:
                _mod = imp.load_module('_llsd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _llsd = swig_import_helper()
    del swig_import_helper
else:
    import _llsd
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


LLSD_UNDEF = _llsd.LLSD_UNDEF
LLSD_BOOLEAN = _llsd.LLSD_BOOLEAN
LLSD_INTEGER = _llsd.LLSD_INTEGER
LLSD_REAL = _llsd.LLSD_REAL
LLSD_UUID = _llsd.LLSD_UUID
LLSD_STRING = _llsd.LLSD_STRING
LLSD_DATE = _llsd.LLSD_DATE
LLSD_URI = _llsd.LLSD_URI
LLSD_BINARY = _llsd.LLSD_BINARY
LLSD_ARRAY = _llsd.LLSD_ARRAY
LLSD_MAP = _llsd.LLSD_MAP
LLSD_TYPE_LAST = _llsd.LLSD_TYPE_LAST
LLSD_TYPE_FIRST = _llsd.LLSD_TYPE_FIRST
LLSD_TYPE_COUNT = _llsd.LLSD_TYPE_COUNT
LLSD_TYPE_INVALID = _llsd.LLSD_TYPE_INVALID
LLSD_KEY = _llsd.LLSD_KEY
LLSD_LLSD = _llsd.LLSD_LLSD
LLSD_ENC_XML = _llsd.LLSD_ENC_XML
LLSD_ENC_BINARY = _llsd.LLSD_ENC_BINARY
LLSD_ENC_NOTATION = _llsd.LLSD_ENC_NOTATION
LLSD_ENC_JSON = _llsd.LLSD_ENC_JSON
LLSD_ENC_LAST = _llsd.LLSD_ENC_LAST
LLSD_ENC_FIRST = _llsd.LLSD_ENC_FIRST
LLSD_ENC_COUNT = _llsd.LLSD_ENC_COUNT
LLSD_NONE = _llsd.LLSD_NONE
LLSD_BASE16 = _llsd.LLSD_BASE16
LLSD_BASE64 = _llsd.LLSD_BASE64
LLSD_BASE85 = _llsd.LLSD_BASE85
LLSD_BIN_ENC_LAST = _llsd.LLSD_BIN_ENC_LAST
LLSD_BIN_ENC_FIRST = _llsd.LLSD_BIN_ENC_FIRST
LLSD_BIN_ENC_COUNT = _llsd.LLSD_BIN_ENC_COUNT
LLSD_RAW = _llsd.LLSD_RAW
UUID_LEN = _llsd.UUID_LEN
UUID_STR_LEN = _llsd.UUID_STR_LEN
DATE_STR_LEN = _llsd.DATE_STR_LEN

def llsd_new(*args):
  return _llsd.llsd_new(*args)
llsd_new = _llsd.llsd_new

def llsd_delete(*args):
  return _llsd.llsd_delete(*args)
llsd_delete = _llsd.llsd_delete

def llsd_get_type(*args):
  return _llsd.llsd_get_type(*args)
llsd_get_type = _llsd.llsd_get_type

def llsd_get_type_string(*args):
  return _llsd.llsd_get_type_string(*args)
llsd_get_type_string = _llsd.llsd_get_type_string

def llsd_get_bin_enc_type_string(*args):
  return _llsd.llsd_get_bin_enc_type_string(*args)
llsd_get_bin_enc_type_string = _llsd.llsd_get_bin_enc_type_string
class llsd_itr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, llsd_itr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, llsd_itr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["li"] = _llsd.llsd_itr_t_li_set
    __swig_getmethods__["li"] = _llsd.llsd_itr_t_li_get
    if _newclass:li = _swig_property(_llsd.llsd_itr_t_li_get, _llsd.llsd_itr_t_li_set)
    __swig_setmethods__["hi"] = _llsd.llsd_itr_t_hi_set
    __swig_getmethods__["hi"] = _llsd.llsd_itr_t_hi_get
    if _newclass:hi = _swig_property(_llsd.llsd_itr_t_hi_get, _llsd.llsd_itr_t_hi_set)
    def __init__(self): 
        this = _llsd.new_llsd_itr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _llsd.delete_llsd_itr_t
    __del__ = lambda self : None;
llsd_itr_t_swigregister = _llsd.llsd_itr_t_swigregister
llsd_itr_t_swigregister(llsd_itr_t)
cvar = _llsd.cvar
llsd_type_strings = cvar.llsd_type_strings
llsd_xml_bin_enc_type_strings = cvar.llsd_xml_bin_enc_type_strings
llsd_notation_bin_enc_type_strings = cvar.llsd_notation_bin_enc_type_strings


def llsd_array_append(*args):
  return _llsd.llsd_array_append(*args)
llsd_array_append = _llsd.llsd_array_append

def llsd_array_unappend(*args):
  return _llsd.llsd_array_unappend(*args)
llsd_array_unappend = _llsd.llsd_array_unappend

def llsd_map_insert(*args):
  return _llsd.llsd_map_insert(*args)
llsd_map_insert = _llsd.llsd_map_insert

def llsd_map_remove(*args):
  return _llsd.llsd_map_remove(*args)
llsd_map_remove = _llsd.llsd_map_remove

def llsd_itr_begin(*args):
  return _llsd.llsd_itr_begin(*args)
llsd_itr_begin = _llsd.llsd_itr_begin

def llsd_itr_end(*args):
  return _llsd.llsd_itr_end(*args)
llsd_itr_end = _llsd.llsd_itr_end

def llsd_itr_rbegin(*args):
  return _llsd.llsd_itr_rbegin(*args)
llsd_itr_rbegin = _llsd.llsd_itr_rbegin

def llsd_itr_next(*args):
  return _llsd.llsd_itr_next(*args)
llsd_itr_next = _llsd.llsd_itr_next

def llsd_itr_rnext(*args):
  return _llsd.llsd_itr_rnext(*args)
llsd_itr_rnext = _llsd.llsd_itr_rnext

def llsd_get(*args):
  return _llsd.llsd_get(*args)
llsd_get = _llsd.llsd_get

def llsd_map_find_llsd(*args):
  return _llsd.llsd_map_find_llsd(*args)
llsd_map_find_llsd = _llsd.llsd_map_find_llsd

def llsd_map_find(*args):
  return _llsd.llsd_map_find(*args)
llsd_map_find = _llsd.llsd_map_find

def llsd_as_integer(*args):
  return _llsd.llsd_as_integer(*args)
llsd_as_integer = _llsd.llsd_as_integer

def llsd_as_double(*args):
  return _llsd.llsd_as_double(*args)
llsd_as_double = _llsd.llsd_as_double

def llsd_as_uuid(*args):
  return _llsd.llsd_as_uuid(*args)
llsd_as_uuid = _llsd.llsd_as_uuid

def llsd_as_string(*args):
  return _llsd.llsd_as_string(*args)
llsd_as_string = _llsd.llsd_as_string

def llsd_as_binary(*args):
  return _llsd.llsd_as_binary(*args)
llsd_as_binary = _llsd.llsd_as_binary

def llsd_equal(*args):
  return _llsd.llsd_equal(*args)
llsd_equal = _llsd.llsd_equal

def llsd_get_count(*args):
  return _llsd.llsd_get_count(*args)
llsd_get_count = _llsd.llsd_get_count
class llsd_ops_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, llsd_ops_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, llsd_ops_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["undef_fn"] = _llsd.llsd_ops_t_undef_fn_set
    __swig_getmethods__["undef_fn"] = _llsd.llsd_ops_t_undef_fn_get
    if _newclass:undef_fn = _swig_property(_llsd.llsd_ops_t_undef_fn_get, _llsd.llsd_ops_t_undef_fn_set)
    __swig_setmethods__["boolean_fn"] = _llsd.llsd_ops_t_boolean_fn_set
    __swig_getmethods__["boolean_fn"] = _llsd.llsd_ops_t_boolean_fn_get
    if _newclass:boolean_fn = _swig_property(_llsd.llsd_ops_t_boolean_fn_get, _llsd.llsd_ops_t_boolean_fn_set)
    __swig_setmethods__["integer_fn"] = _llsd.llsd_ops_t_integer_fn_set
    __swig_getmethods__["integer_fn"] = _llsd.llsd_ops_t_integer_fn_get
    if _newclass:integer_fn = _swig_property(_llsd.llsd_ops_t_integer_fn_get, _llsd.llsd_ops_t_integer_fn_set)
    __swig_setmethods__["real_fn"] = _llsd.llsd_ops_t_real_fn_set
    __swig_getmethods__["real_fn"] = _llsd.llsd_ops_t_real_fn_get
    if _newclass:real_fn = _swig_property(_llsd.llsd_ops_t_real_fn_get, _llsd.llsd_ops_t_real_fn_set)
    __swig_setmethods__["uuid_fn"] = _llsd.llsd_ops_t_uuid_fn_set
    __swig_getmethods__["uuid_fn"] = _llsd.llsd_ops_t_uuid_fn_get
    if _newclass:uuid_fn = _swig_property(_llsd.llsd_ops_t_uuid_fn_get, _llsd.llsd_ops_t_uuid_fn_set)
    __swig_setmethods__["string_fn"] = _llsd.llsd_ops_t_string_fn_set
    __swig_getmethods__["string_fn"] = _llsd.llsd_ops_t_string_fn_get
    if _newclass:string_fn = _swig_property(_llsd.llsd_ops_t_string_fn_get, _llsd.llsd_ops_t_string_fn_set)
    __swig_setmethods__["date_fn"] = _llsd.llsd_ops_t_date_fn_set
    __swig_getmethods__["date_fn"] = _llsd.llsd_ops_t_date_fn_get
    if _newclass:date_fn = _swig_property(_llsd.llsd_ops_t_date_fn_get, _llsd.llsd_ops_t_date_fn_set)
    __swig_setmethods__["uri_fn"] = _llsd.llsd_ops_t_uri_fn_set
    __swig_getmethods__["uri_fn"] = _llsd.llsd_ops_t_uri_fn_get
    if _newclass:uri_fn = _swig_property(_llsd.llsd_ops_t_uri_fn_get, _llsd.llsd_ops_t_uri_fn_set)
    __swig_setmethods__["binary_fn"] = _llsd.llsd_ops_t_binary_fn_set
    __swig_getmethods__["binary_fn"] = _llsd.llsd_ops_t_binary_fn_get
    if _newclass:binary_fn = _swig_property(_llsd.llsd_ops_t_binary_fn_get, _llsd.llsd_ops_t_binary_fn_set)
    __swig_setmethods__["array_begin_fn"] = _llsd.llsd_ops_t_array_begin_fn_set
    __swig_getmethods__["array_begin_fn"] = _llsd.llsd_ops_t_array_begin_fn_get
    if _newclass:array_begin_fn = _swig_property(_llsd.llsd_ops_t_array_begin_fn_get, _llsd.llsd_ops_t_array_begin_fn_set)
    __swig_setmethods__["array_value_begin_fn"] = _llsd.llsd_ops_t_array_value_begin_fn_set
    __swig_getmethods__["array_value_begin_fn"] = _llsd.llsd_ops_t_array_value_begin_fn_get
    if _newclass:array_value_begin_fn = _swig_property(_llsd.llsd_ops_t_array_value_begin_fn_get, _llsd.llsd_ops_t_array_value_begin_fn_set)
    __swig_setmethods__["array_value_end_fn"] = _llsd.llsd_ops_t_array_value_end_fn_set
    __swig_getmethods__["array_value_end_fn"] = _llsd.llsd_ops_t_array_value_end_fn_get
    if _newclass:array_value_end_fn = _swig_property(_llsd.llsd_ops_t_array_value_end_fn_get, _llsd.llsd_ops_t_array_value_end_fn_set)
    __swig_setmethods__["array_end_fn"] = _llsd.llsd_ops_t_array_end_fn_set
    __swig_getmethods__["array_end_fn"] = _llsd.llsd_ops_t_array_end_fn_get
    if _newclass:array_end_fn = _swig_property(_llsd.llsd_ops_t_array_end_fn_get, _llsd.llsd_ops_t_array_end_fn_set)
    __swig_setmethods__["map_begin_fn"] = _llsd.llsd_ops_t_map_begin_fn_set
    __swig_getmethods__["map_begin_fn"] = _llsd.llsd_ops_t_map_begin_fn_get
    if _newclass:map_begin_fn = _swig_property(_llsd.llsd_ops_t_map_begin_fn_get, _llsd.llsd_ops_t_map_begin_fn_set)
    __swig_setmethods__["map_key_begin_fn"] = _llsd.llsd_ops_t_map_key_begin_fn_set
    __swig_getmethods__["map_key_begin_fn"] = _llsd.llsd_ops_t_map_key_begin_fn_get
    if _newclass:map_key_begin_fn = _swig_property(_llsd.llsd_ops_t_map_key_begin_fn_get, _llsd.llsd_ops_t_map_key_begin_fn_set)
    __swig_setmethods__["map_key_end_fn"] = _llsd.llsd_ops_t_map_key_end_fn_set
    __swig_getmethods__["map_key_end_fn"] = _llsd.llsd_ops_t_map_key_end_fn_get
    if _newclass:map_key_end_fn = _swig_property(_llsd.llsd_ops_t_map_key_end_fn_get, _llsd.llsd_ops_t_map_key_end_fn_set)
    __swig_setmethods__["map_value_begin_fn"] = _llsd.llsd_ops_t_map_value_begin_fn_set
    __swig_getmethods__["map_value_begin_fn"] = _llsd.llsd_ops_t_map_value_begin_fn_get
    if _newclass:map_value_begin_fn = _swig_property(_llsd.llsd_ops_t_map_value_begin_fn_get, _llsd.llsd_ops_t_map_value_begin_fn_set)
    __swig_setmethods__["map_value_end_fn"] = _llsd.llsd_ops_t_map_value_end_fn_set
    __swig_getmethods__["map_value_end_fn"] = _llsd.llsd_ops_t_map_value_end_fn_get
    if _newclass:map_value_end_fn = _swig_property(_llsd.llsd_ops_t_map_value_end_fn_get, _llsd.llsd_ops_t_map_value_end_fn_set)
    __swig_setmethods__["map_end_fn"] = _llsd.llsd_ops_t_map_end_fn_set
    __swig_getmethods__["map_end_fn"] = _llsd.llsd_ops_t_map_end_fn_get
    if _newclass:map_end_fn = _swig_property(_llsd.llsd_ops_t_map_end_fn_get, _llsd.llsd_ops_t_map_end_fn_set)
    def __init__(self): 
        this = _llsd.new_llsd_ops_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _llsd.delete_llsd_ops_t
    __del__ = lambda self : None;
llsd_ops_t_swigregister = _llsd.llsd_ops_t_swigregister
llsd_ops_t_swigregister(llsd_ops_t)

TOP_LEVEL = _llsd.TOP_LEVEL
ARRAY_BEGIN = _llsd.ARRAY_BEGIN
ARRAY_VALUE_BEGIN = _llsd.ARRAY_VALUE_BEGIN
ARRAY_VALUE = _llsd.ARRAY_VALUE
ARRAY_VALUE_END = _llsd.ARRAY_VALUE_END
ARRAY_END = _llsd.ARRAY_END
MAP_BEGIN = _llsd.MAP_BEGIN
MAP_KEY_BEGIN = _llsd.MAP_KEY_BEGIN
MAP_KEY = _llsd.MAP_KEY
MAP_KEY_END = _llsd.MAP_KEY_END
MAP_VALUE_BEGIN = _llsd.MAP_VALUE_BEGIN
MAP_VALUE = _llsd.MAP_VALUE
MAP_VALUE_END = _llsd.MAP_VALUE_END
MAP_END = _llsd.MAP_END

def llsd_serialize_to_file(*args):
  return _llsd.llsd_serialize_to_file(*args)
llsd_serialize_to_file = _llsd.llsd_serialize_to_file

def llsd_parse_from_file(*args):
  return _llsd.llsd_parse_from_file(*args)
llsd_parse_from_file = _llsd.llsd_parse_from_file
# This file is compatible with both classic and new-style classes.


